<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
    <Type Name="Node" Inheritable="true">
        <DisplayString>{location}</DisplayString>
    </Type>
    <Type Name="Node" Inheritable="false">
        <Expand>
            <Item Name="[value]" Condition="kind==NodeKind::Block              " Optional="true">*(Block              *)this</Item>
            <Item Name="[value]" Condition="kind==NodeKind::Call               " Optional="true">*(Call               *)this</Item>
            <Item Name="[value]" Condition="kind==NodeKind::Definition         " Optional="true">*(Definition         *)this</Item>
            <Item Name="[value]" Condition="kind==NodeKind::IntegerLiteral     " Optional="true">*(IntegerLiteral     *)this</Item>
            <Item Name="[value]" Condition="kind==NodeKind::BooleanLiteral     " Optional="true">*(BooleanLiteral     *)this</Item>
            <Item Name="[value]" Condition="kind==NodeKind::Lambda             " Optional="true">*(Lambda             *)this</Item>
            <Item Name="[value]" Condition="kind==NodeKind::LambdaHead         " Optional="true">*(LambdaHead         *)this</Item>
            <Item Name="[value]" Condition="kind==NodeKind::Name               " Optional="true">*(Name               *)this</Item>
            <Item Name="[value]" Condition="kind==NodeKind::If                 " Optional="true">*(If                 *)this</Item>
            <Item Name="[value]" Condition="kind==NodeKind::BuiltinTypeName    " Optional="true">*(BuiltinTypeName    *)this</Item>
            <Item Name="[value]" Condition="kind==NodeKind::Return             " Optional="true">*(Return             *)this</Item>
            <Item Name="[value]" Condition="kind==NodeKind::While              " Optional="true">*(While              *)this</Item>
            <Item Name="[value]" Condition="kind==NodeKind::Continue           " Optional="true">*(Continue           *)this</Item>
            <Item Name="[value]" Condition="kind==NodeKind::Break              " Optional="true">*(Break              *)this</Item>
            <Item Name="[value]" Condition="kind==NodeKind::Binary             " Optional="true">*(Binary             *)this</Item>
            <Item Name="[value]" Condition="kind==NodeKind::Match              " Optional="true">*(Match              *)this</Item>
            <Item Name="[value]" Condition="kind==NodeKind::Unary              " Optional="true">*(Unary              *)this</Item>
            <Item Name="[value]" Condition="kind==NodeKind::ArrayType          " Optional="true">*(ArrayType          *)this</Item>
            <Item Name="[value]" Condition="kind==NodeKind::ArrayConstructor   " Optional="true">*(ArrayConstructor   *)this</Item>
            <Item Name="[value]" Condition="kind==NodeKind::Subscript          " Optional="true">*(Subscript          *)this</Item>
            <Item Name="[value]" Condition="kind==NodeKind::Struct             " Optional="true">*(Struct             *)this</Item>
        </Expand>
    </Type>
    <Type Name="Name">
        <DisplayString>{location}: {type, na}</DisplayString>
    </Type>
    <Type Name="BuiltinType">
        <DisplayString>{location}: {type}</DisplayString>
    </Type>
    <Type Name="BuiltinTypeName">
        <DisplayString>{type_kind}</DisplayString>
    </Type>
    <Intrinsic Name="reg" Expression="1">
        <Parameter Name="r" Type="Bytecode::Register"/>
    </Intrinsic>
    <Type Name="Bytecode::Address">
        <DisplayString Condition="base._has_value&amp;&amp;element_size&amp;&amp;offset">{base._value} + r{(int)element_index}*{(int)element_size} + {offset}</DisplayString>
        <DisplayString Condition="element_size&amp;&amp;offset">r{(int)element_index}*{(int)element_size} + {offset}</DisplayString>
        <DisplayString Condition="base._has_value&amp;&amp;offset">r{(int)base._value} + {offset}</DisplayString>
        <DisplayString Condition="base._has_value&amp;&amp;element_size">r{(int)base._value} + r{(int)element_index}*{(int)element_size}</DisplayString>
        <DisplayString Condition="base._has_value">r{(int)base._value}</DisplayString>
        <DisplayString Condition="element_size">r{(int)element_index}*{(int)element_size}</DisplayString>
        <DisplayString>{offset}</DisplayString>
    </Type>
    <Type Name="Bytecode::Site">
        <DisplayString Condition="_is_address">{a}</DisplayString>
        <DisplayString>r{(int)r}</DisplayString>
    </Type>
    <Type Name="Bytecode::InputValue">
        <DisplayString Condition="kind==Kind::Register">r{(int)r}</DisplayString>
        <DisplayString Condition="kind==Kind::Address">{a}</DisplayString>
        <DisplayString>{c}</DisplayString>
    </Type>
</AutoVisualizer>